
// mov
// ld
// st
// shl
// shr
// add
// and
// xor
// bne
// ba

	// %R1 = MSB A
	// %R2 = LSB A
	// %R3 = B
	// %R4 = signed bit (0 = positive, 1 = negative)
	// %R5 = least sig bit of B / temp reg 1
	// %R6 = temp reg 2
	// %R7 = MSB product
	// %R8 = LSB product

	mov 0, %R7
	mov 0, %R8

	ld M[1], %R1			// %R1 = MSB A
	ld M[2], %R2			// %R2 = LSB A
	ld M[3], %R3			// %R3 = MSB B
	ld M[4], %R4			// %R4 = LSB B

	shl %R3
	sh1 %R3
	shl %R3
	shl %R3
	add %R4, %R3			// move MSB and LSB of B to single register

	mov 0x08, %R4
	and %R1, %R4			// %R4 = check signed bit of A
	shl %R4					// align with MSB
	shl %R4
	shl %R4
	shl %R4

	mov 0x80, %R5
	and %R3, %R5			// %R5 = check signed bit of B
	
	mov %R5, %R6
	and %R4, %R6			
	bne %R6, 0, NEGA		// if A && B are neg, fp is pos

	bne %R5, 0, NEGB		

NEGA:						// if A is neg, abs
	
	mov 0xFF, %R4			
	xor %R4, %R1			// take two's comp: xor by 1's
	mov 0x01, %R4
	add %R4, %R1			// add 1
	
	bne %R6, 0, NEGB		// NEGAB
	mov 1, %R4
	ba SMULTIPLY

NEGB:						// if B is neg, abs
	
	mov 0xFF, %R4
	xor %R4, %R2			// take two's comp: xor by 1's
	mov 0x01, %R4
	add %R4, %R2			// add 1
	
	bne %R6, 0, NEGAB		// NEGAB
	mov 1, %R4
	ba SMULTIPLY

NEGAB:

	mov 0, %R4

SMULTIPLY:

	mov 0x01, %R5
	and %R3, %R5			// %R5 = least sig bit of B

	bne %R5, 1, SHIFT		// if LSB == 0, jump

	mov 0x0F, %R5
	and %R8, %R5			// ---- FP[R8LSB]
	add %R2, %R5			// ---- A[LSB] + FP[R8LSB]

	mov 0xF0, %R6
	and %R8, %R6			// FP[R8MSB] ----
	shr %R6
	shr %R6
	shr %R6
	shr %R6					// ----	FP[R8MSB]

	mov %R5, %R8			// move LSB to final product

	mov 0xF0, %R5
	and %R8, %R5			// OV[FP[R8LSB]]
	shr %R5
	shr %R5
	shr %R5
	shr %R5					// ----	OV[FP[R8LSB]]

	add %R5, %R6			// OV[FP[R8LSB]] + FP[R8MSB]

	mov 0x0F, %R5			// clear MSB of R8
	and %R5, %R8			// ----	FB[R8LSB]

	add %R1, %R6			// ---- A[MSB] + ( OV[FP[R8LSB]] + FP[R8MSB] )

	mov 0x0F, %R5
	and %R6, %R5
	shl %R5
	shl %R5
	shl %R5
	shl %R5					// A[MSB] + ( OV[FP[R8LSB]] + FP[R8MSB] ) ----

	add %R5, %R8			// FP[R8MSB]	FP[R8LSB]

	shr %R6
	shr %R6
	shr %R6
	shr %R6					// ----	OV[FP[R8MSB]]

	add %R6, %R7			// OV[FP[R8MSB]] + FP[R7]

SHIFT:
	
	mov 0x08, %R5
	and %R2, %R5			// most sig bit of A LSB
	shr %R5
	shr %R5
	shr %R5

	shl %R2					// shift A left 1			
	shl %R1					
	add %R5, %R1			// move bit from LSB A to MSB A

	mov 0x0F, %R5
	and %R5, %R1			// clear MSB of MSB A
	and %R5, %R2			// clear MSB of LSB A

	shr %R3					// shift B right 1

	bne %R2, %R0, SMULTIPLY

	bne %R4, 0, STORE		// if unsigned

	// if signed, take two's comp and add 1

	mov 0xFF, %R5
	xor %R5, %R7			// take two's comp: xor by 1's
	xor %R5, %R8

	mov 0x01, %R5			
	mov 0x0F, %R6
	and %R8, %R6			// ---- LSB[R8] 
	add %R5, %R6			// ---- LSB[R8]+1

	mov 0xF0, %R5
	and %R8, %R5			// MSB[R8] ----
	shr %R5
	shr %R5
	shr %R5
	shr %R5					// ---- MSB[R8]

	mov %R6, %R8 			// move LSB[R8] + 1 to R8

	mov 0xF0, %R6
	and %R8, %R6			// OV[LSB] ----
	shr %R6
	shr %R6
	shr %R6					
	shr %R6					// ---- OV[LSB]

	add %R6, %R5			// OV[LSB] + MSB[R8]

	mov %0F, %R6			// clear MSB of R8
	and %R6, %R8 			// R8 = ---- LSB[R8]+1			

	mov %0F, %R6
	and %R5, %R6			// ---- OV[LSB]+MSB[R8]
	shl %R6
	shl %R6
	shl %R6
	shl %R6					// MSB[R8]+OV[LSB] ----

	add %R6, %R8 			// MSB[R8]+OV[LSB]	LSB[R8]+1 

	shr %R5
	shr %R5
	shr %R5
	shr %R5					// ---- OV[MSB]

	add %R5, %R7			// OV[MSB] + R7

STORE:

	st %R7, M[5]
	st %R8, M[6]
