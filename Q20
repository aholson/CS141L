



cmpA - automatically cmps to value
cmpB - automatically cmps to value

Instruction format
Instruction Type
_ _ _ 	_ _ _  _ _  |  _


// add __  __
// mov

// bne
// ble
// ba

// load_inc_
// incA
// incB
// cpmA
// cpmB

// xor
// and
// shift >>
// ba


################################################################################

# G0


R1 - Outer counter (a)
R2 - Inner counter (b)

R3 - Current Max
R4 - Current Byte of Outer Loop
R5 - Current Byte of Inner Loop
R6 - Holds XOR'd result of R4 & R5

R7 - LSB of R6

R8 - Holds Hammond distance for current pair of Bytes
$acc (internal reg)

	mov 0, %R1				// out counter
	mov 0, %R3				// highest dial
  mov 128,$R9       // Initial Address

OUTER:
  cmpA 20
	bne end
	load_inc %R9, %R4 // Load Inc
	mov %R9, %R5			// copy at outer loop counter
	mov %0, %R8				// hamming distance temp  ***
	incA              // inner loop counter (R1+1)

INNER:
  cmpB 20
	bne INNER_END
	load_inc %R5, %R6		// current data for inner loop
	xor %R4, %R6, %R6		// getting hamming value

MASK:
	and 1, %R6, %R7
	add %R7, %R8 // adding together hamming distances TEMP ***
	shr %R6					// shift right
	bne %R6, 0, MASK

  incB
  cmp %R8, %R3
	ble INNER
	mov %R8, %R3			// compare and replace it >
	ba  INNER

INNER_END:
  incA
	ba  OUTER
	end

Instructions (14)
################################################################################


TypeX ---> Stores in Acc
_ _ _ _  _ _ _  | _ _
OP code  Reg      Immediate
